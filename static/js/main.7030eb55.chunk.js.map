{"version":3,"sources":["components/Background/Background.jsx","components/Button/Button.jsx","components/Quote/Quote.jsx","data/api.js","utils/utils.js","App.jsx","reportWebVitals.js","index.js"],"names":["Background","children","className","Button","label","onClick","Quote","text","author","currentQuote","useMemo","getRandomQuote","a","min","max","Math","floor","random","axios","get","data","length","console","error","App","useState","setCurrentQuote","getNewQuote","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yRAUeA,EARI,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACpB,OACE,qBAAKC,UAAU,aAAf,SACE,sBAAMA,UAAU,sBAAhB,SAAuCD,OCK9BE,G,MARA,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,QACvB,OACE,wBAAQH,UAAU,SAASG,QAASA,EAApC,SACGD,MCaQE,G,MAfD,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OACfC,EAAeC,mBAAQ,WAC3B,OAAOH,EACL,qCACE,mBAAGL,UAAU,iBAAb,SAA+BK,IAC/B,wBAAQL,UAAU,gBAAlB,gBAAmCM,QAAnC,IAAmCA,IAAU,iBAG/C,mBAAGN,UAAU,iBAAb,6CAED,CAACM,EAAQD,IAEZ,OAAO,4BAAYL,UAAU,QAAtB,SAA+BO,M,iBCZ3BE,EAAc,uCAAG,8BAAAC,EAAA,yDAEO,MCLDC,EDKV,ECLeC,EDKZ,GCJpBC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IDExB,yCAGnB,CACLN,KAAM,yBACNC,OAAQ,eALgB,gCAUHU,IAAMC,IAAI,+BAVP,uBAUlBC,EAVkB,EAUlBA,KAVkB,kBAWnBA,EAAKL,KAAKC,MAAMD,KAAKE,SAAWG,EAAKC,UAXlB,kCAa1BC,QAAQC,MAAR,MAb0B,kCCHK,IAACV,EAAKC,IDGX,qBAAH,qDEoBZU,G,MAhBH,WACV,MAAwCC,qBAAxC,mBAAOhB,EAAP,KAAqBiB,EAArB,KAEMC,EAAW,uCAAG,sBAAAf,EAAA,kEAClBc,EADkB,SACIf,IADJ,6EAAH,qDAIjB,OACE,eAAC,EAAD,WACE,oDACA,cAAC,EAAD,CAAOJ,KAAI,OAAEE,QAAF,IAAEA,OAAF,EAAEA,EAAcF,KAAMC,OAAM,OAAEC,QAAF,IAAEA,OAAF,EAAEA,EAAcD,SACvD,cAAC,EAAD,CAAQJ,MAAM,YAAYC,QAASsB,SCN1BC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7030eb55.chunk.js","sourcesContent":["import \"./_Background.scss\";\n\nconst Background = ({ children }) => {\n  return (\n    <div className=\"background\">\n      <main className=\"background__content\">{children}</main>\n    </div>\n  );\n};\n\nexport default Background;\n","import \"./_Button.scss\";\n\nconst Button = ({ label, onClick }) => {\n  return (\n    <button className=\"button\" onClick={onClick}>\n      {label}\n    </button>\n  );\n};\n\nexport default Button;\n","import { useMemo } from \"react\";\nimport \"./_Quote.scss\";\n\nconst Quote = ({ text, author }) => {\n  const currentQuote = useMemo(() => {\n    return text ? (\n      <>\n        <q className=\"quote__content\">{text}</q>\n        <footer className=\"quote__author\">{author ?? \"Anonymous\"}</footer>\n      </>\n    ) : (\n      <p className=\"quote__content\">Are you ready to be inspired?</p>\n    );\n  }, [author, text]);\n\n  return <blockquote className=\"quote\">{currentQuote}</blockquote>;\n};\n\nexport default Quote;\n","import axios from \"axios\";\nimport { randomNumberInRange } from \"../utils/utils\";\n\nexport const getRandomQuote = async () => {\n  // 1 in 20 chance to get specific quote\n  if (randomNumberInRange(1, 20) === 20) {\n    return {\n      text: \"Dream big, think small\",\n      author: \"Andy Evans\",\n    };\n  }\n\n  try {\n    const { data } = await axios.get(\"https://type.fit/api/quotes\");\n    return data[Math.floor(Math.random() * data.length)];\n  } catch (error) {\n    console.error(error);\n  }\n};\n","export const randomNumberInRange = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n","import { useState } from \"react\";\nimport Background from \"./components/Background/Background\";\nimport Button from \"./components/Button/Button\";\nimport Quote from \"./components/Quote/Quote\";\nimport { getRandomQuote } from \"./data/api\";\nimport \"./styles/main.scss\";\n\nconst App = () => {\n  const [currentQuote, setCurrentQuote] = useState();\n\n  const getNewQuote = async () => {\n    setCurrentQuote(await getRandomQuote());\n  };\n\n  return (\n    <Background>\n      <h1>Welcome to inSpire</h1>\n      <Quote text={currentQuote?.text} author={currentQuote?.author} />\n      <Button label=\"New Quote\" onClick={getNewQuote} />\n    </Background>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}